import groovy.json.JsonOutput
import groovy.json.JsonSlurper

import java.util.function.Consumer

plugins {
    id 'org.ajoberstar.grgit' version '5.0.0'
    id "com.matthewprenger.cursegradle" version '1.4.0'
    id 'java'
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '5.1.+'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
}

//apply from: 'classremapper.gradle'



tasks.named('wrapper', Wrapper).configure {
    //Define wrapper values here so as to not have to always do so when updating gradlew.properties
    gradleVersion = '7.6.1'
    distributionType = Wrapper.DistributionType.ALL
}

//apply from: 'https://raw.githubusercontent.com/SizableShrimp/Forge-Class-Remapper/main/classremapper.gradle'

defaultTasks 'build'

idea {
    module {
        //Exclude directories from being managed
        for (String excludeDirName in ["run", "out", "logs", "gradle"]) {
            excludeDirs.add(new File(projectDir, excludeDirName))
        }
    }
}

group = group_id
version = "${mod_version}." + (System.env.BUILD_NUMBER ?: 000)
archivesBaseName = "ModularPowersuits"

println("mod_version: ${mod_version}")

ext {
    versionProperties = ["mod_version": project.version,
                         "minecraft_version": minecraft_version_range,
                         "forge_version": forge_version_range,
                         "loader_version": loader_version_range,
                         "jei_version": jei_version_range,
                         "ae2_version": ae2_version,
                         "scannable_version": scannable_version,
                         "refinedstorage_version": refinedstorage_version_range]
    jsonPatterns = ["**/*.json", "**/*.mcmeta"]
}

// export this for the remapper since it can't seem to find it
project.ext."MC_VERSION"=minecraft_version

sourceSets {
    main {
        resources {
            include '**/**'
            //Add the generated main module resources, as well as those generated by the annotation processor
            srcDirs += 'src/datagen/generated/numina'
            //But exclude the cache of the generated data from what gets built
            exclude '.cache'
        }
    }

    powersuits {
        setupSourceSet(powersuits, 'powersuits')
    }

    recipecreator {
        setupSourceSet(recipecreator, 'recipecreator')
    }

    whatever {
        setupSourceSet(whatever, 'whatever')
    }

    //Data gen modules for the different modules
    datagenmain {
        setupDataGenSourceSet(datagenmain, null, 'main')
    }
    datagenpowersuits {
        setupDataGenSourceSet(datagenpowersuits, powersuits, 'powersuits')
    }
    datagenrecipecreator {
        setupDataGenSourceSet(datagenrecipecreator, recipecreator, 'mpsrecipecreator')
    }
    datagenwhatever {
        setupDataGenSourceSet(datagenwhatever, whatever, 'mpswhatever')
    }
}

//This method sets up an additional sourceSet in src/$name and adds a reference to the corresponding
// data gen's resource directory excluding the cache. It also adds the main numina module
// to the dependencies of the source set we are setting up
def setupSourceSet(SourceSet sourceSet, String name) {
    sourceSet.resources {
        //Add the generated module resources
        srcDirs += "src/datagen/generated/${name}"
        //But exclude the cache of the generated data from what gets built
        exclude '.cache'
    }
    sourceSet.compileClasspath += sourceSets.main.output
}

//This method sets up a source set in datagen/$name and adds the main numina module and an optional
// base module to the dependencies of the data generators source set that we are setting up
def setupDataGenSourceSet(SourceSet datagenSourceSet, SourceSet baseSourceSet, String name) {
    datagenSourceSet.java.srcDirs = ['src/datagen/' + name + '/java']
    datagenSourceSet.compileClasspath += project.sourceSets.main.output
    if (baseSourceSet == null) {
        //Base source set has resources that we put files that our annotation processor generates for consumption by our datagen
        datagenSourceSet.resources.srcDirs = ['src/datagen/' + name + '/resources']
    } else {
        //Data gen sourceSets outside of the main one have no resources
        datagenSourceSet.resources.srcDirs = []
        //Only case it is null is when we are doing datagenmain so other cases also add access to the stuff
        // in datagenmain so we can add helper classes
        datagenSourceSet.compileClasspath += project.sourceSets.datagenmain.output
        datagenSourceSet.compileClasspath += baseSourceSet.output
    }
}

configurations {
    //Make sure all our sub source set stuff extends the proper base methods so that
    // they can see all the dependencies we have in dependencies including forge
    extendConfigurations(implementation, datagenmainImplementation)
    extendConfigurations(compileOnly, datagenmainCompileOnly)
    extendConfigurations(runtimeOnly, datagenmainRuntimeOnly)
    //Extend configurations for alternate modules. First by making the implementation, compileOnly, runtimeOnly equivalents
    // for those modules extend the main ones, and then by making the corresponding ones for datagen for the module extend those.
    // This way if we add a dependency/integration in a submodule instead of the main module of Numina, the datagen of the corresponding
    // module will be able to properly access the dependency
    for (def name : ["powersuits", "recipecreator", "whatever"]) {
        maybeCreate("datagen${name}Implementation").extendsFrom(maybeCreate("${name}Implementation").extendsFrom(implementation))
        maybeCreate("datagen${name}CompileOnly").extendsFrom(maybeCreate("${name}CompileOnly").extendsFrom(compileOnly))
        maybeCreate("datagen${name}RuntimeOnly").extendsFrom(maybeCreate("${name}RuntimeOnly").extendsFrom(runtimeOnly))
    }
}

static void extendConfigurations(Configuration base, Configuration... configurations) {
    for (def configuration : configurations) {
        configuration.extendsFrom(base)
    }
}

//Setup the UPDATE_SOURCESET property in case we are doing any remappings
// Note, for this to work on all source sets, all source folders must be present including those not being used (such as src/test/java)
project.ext."UPDATE_SOURCESETS" = project.sourceSets.collect { it.name }.join(';')

def mainReplaceResources = createReplaceResourcesTask("main", sourceSets.main)
def powersuitsReplaceResources = createReplaceResourcesTask("powersuits", sourceSets.powersuits)
def recipecreatorReplaceResources = createReplaceResourcesTask("recipecreator", sourceSets.recipecreator)
def whateverReplaceResources = createReplaceResourcesTask("whatever", sourceSets.whatever)

def createReplaceResourcesTask(String output, SourceSet sourceSet) {
    return tasks.register("${output}ReplaceResources", Copy) {
        it.outputs.upToDateWhen { false }
        def modsToml = copySpec {
            from(sourceSet.resources) {
                include "META-INF/mods.toml"
                expand versionProperties
            }
        }
        //Copy it into the build dir
        it.with modsToml
        it.into "$buildDir/resources/${output}/"
        //If IntelliJ's output dir exists, copy it there as well
        if (new File("$rootDir/out/production/Numina.${output}/").exists()) {
            //Note: This copies it into the correct place, but it still doesn't have the IntelliJ
            // run work by default because of incorrect MOD_CLASSES getting generated.
            // probably related to us setting inheritOutputDirs
            copy {
                with modsToml
                into "$rootDir/out/production/Numina.${output}/"
            }
        }
        //If Eclipse's output dir exists, copy it there as well
        if (new File("$rootDir/bin/${output}/").exists()) {
            copy {
                with modsToml
                into "$rootDir/bin/${output}/"
            }
        }
    }
}

//Set the various variables/settings for the different process resources tasks
processResources { setupProcessResources(processResources, mainReplaceResources) }
processPowersuitsResources { setupProcessResources(processPowersuitsResources, powersuitsReplaceResources) }
processRecipecreatorResources { setupProcessResources(processRecipecreatorResources, recipecreatorReplaceResources) }
processWhateverResources { setupProcessResources(processWhateverResources, whateverReplaceResources) }
processDatagenmainResources { dependsOn(compileJava) }

def setupProcessResources(ProcessResources process, TaskProvider<Task> replaceResources) {
    process.duplicatesStrategy(DuplicatesStrategy.FAIL)
    process.exclude('META-INF/mods.toml')
    process.from("${projectDir}") { include 'logo.png' }
    process.configure { finalizedBy(replaceResources) }
    process.doLast {
        fileTree(dir: process.getOutputs().getFiles().getAsPath(), includes: jsonPatterns).each {
            File file -> file.setText(JsonOutput.toJson(new JsonSlurper().parse(file)))
        }
    }
}

//Make the various classes tasks depend on the corresponding replaceResources tasks in addition to the default processResources tasks they depend on
classes.configure { dependsOn(mainReplaceResources) }
powersuitsClasses.configure { dependsOn(powersuitsReplaceResources) }
recipecreatorClasses.configure { dependsOn(recipecreatorReplaceResources) }
whateverClasses.configure { dependsOn(whateverReplaceResources) }



println("version: ${project.version}")
java {
    toolchain.languageVersion = JavaLanguageVersion.of("${java_version}")
//    withSourcesJar()
}

minecraft {
    mappings channel: "${mappings_channel}", version: "${mappings_version}"

    accessTransformers.from(
            file('src/main/resources/META-INF/accesstransformer.cfg'),
            file('src/powersuits/resources/META-INF/accesstransformer.cfg'),
            file('src/recipecreator/resources/META-INF/accesstransformer.cfg'))

    runs {
        client {
            workingDirectory file("run")
            // FIXME: is this still needed?
            //This fixes Mixin application problems from other mods because their refMaps are SRG-based, but we're in a MCP env
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"


            //The below if statements are to add args to your gradle.properties file in user home
            // (DO NOT add them directly to the gradle.properties file for this project)
            // Setting the below properties allows use of your normal Minecraft account in the
            // dev environment including having your skin load. Each property also has a comment
            // explaining what information to set the value to/format it expects
            // One thing to note is because of the caching that goes on, after changing these
            // variables, you need to refresh the project and rerun genIntellijRuns/genEclipseRuns
            if (project.hasProperty('mc_uuid')) {
                //Your uuid without any dashes in the middle
                args '--uuid', project.getProperty('mc_uuid')
            }
            if (project.hasProperty('mc_username')) {
                //Your username/display name, this is the name that shows up in chat
                // Note: This is not your email, even if you have a Mojang account
                args '--username', project.getProperty('mc_username')
            }
            if (project.hasProperty('mc_accessToken')) {
                //Your access token, you can find it in your '.minecraft/launcher_accounts.json' file
                args '--accessToken', project.getProperty('mc_accessToken')
            }

            mods {
                numina.sources((SourceSet) sourceSets.main)
                modularpowersuits.source((SourceSet) sourceSets.powersuits)
                mpsrecipecreator.source((SourceSet) sourceSets.recipecreator)
                mpswhatever.source((SourceSet) sourceSets.whatever)
            }

        }
        server {
            workingDirectory file("run")
//            This fixes Mixin application problems from other mods because their refMaps are SRG-based, but we're in a MCP env
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            if (project.hasProperty('forge_force_ansi')) {
                //Force ansi if declared as a gradle variable, as the auto detection doesn't detect IntelliJ properly
                // or eclipse's plugin that adds support for ansi escape in console
                jvmArg('-Dterminal.ansi=' + project.getProperty('forge_force_ansi'))
            }

            mods {
                numina.sources((SourceSet) sourceSets.main)
                modularpowersuits.source((SourceSet) sourceSets.powersuits)
                mpsrecipecreator.source((SourceSet) sourceSets.recipecreator)
                mpswhatever.source((SourceSet) sourceSets.whatever)
            }
        }

        data {
            workingDirectory file("run")
            environment 'target', 'fmluserdevdata'
            //This fixes Mixin application problems from other mods because their refMaps are SRG-based, but we're in a MCP env
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            if (project.hasProperty('forge_force_ansi')) {
                //Force ansi if declared as a gradle variable, as the auto detection doesn't detect IntelliJ properly
                // or eclipse's plugin that adds support for ansi escape in console
                jvmArg('-Dterminal.ansi=' + project.getProperty('forge_force_ansi'))
            }

            args '--all', '--output', file('src/datagen/generated/'),
                    '--mod', 'numina',
                    '--existing', file('src/main/resources/'),
                    '--mod', 'modularpowersuits',
                    '--existing', file('src/powersuits/resources/'),
                    '--mod', 'mpsrecipecreator',
                    '--existing', file('src/recipecreator/resources/'),
                    '--mod', 'mpswhatever',
                    '--existing', file('src/whatever/resources/')

            mods {
                numina.sources((SourceSet[]) [sourceSets.main, sourceSets.datagenmain])
                modularpowersuits.sources((SourceSet[]) [sourceSets.powersuits, sourceSets.datagenpowersuits])
                mpsrecipecreator.sources((SourceSet[]) [sourceSets.recipecreator, sourceSets.datagenrecipecreator])
                mpswhatever.sources((SourceSet[]) [sourceSets.whatever, sourceSets.datagenwhatever])
            }
        }
    }
}



void exclusiveRepo(RepositoryHandler handler, String url, String... groups) {
    exclusiveRepo(handler, url, filter -> {
        for (def group : groups) {
            filter.includeGroup(group)
        }
    })
}

//Note: This cannot be static so that fg.repository can be properly accessed
@SuppressWarnings('GrMethodMayBeStatic')
void exclusiveRepo(RepositoryHandler handler, String url, Consumer<InclusiveRepositoryContentDescriptor> filterSetup) {
    handler.exclusiveContent {
        it.forRepositories(handler.maven {
            setUrl(url)
        }, fg.repository)//Add FG's repo so we make sure we are able to then find the mapped deps
        it.filter { f -> filterSetup.accept(f) }
    }
}

repositories { RepositoryHandler handler ->
    exclusiveRepo(handler, 'https://maven.blamejared.com', filter -> {
        filter.includeGroupByRegex 'com\\.blamejared.*'
        filter.includeGroup 'mezz.jei'
    })
    exclusiveRepo(handler, 'https://maven.theillusivec4.top/', 'top.theillusivec4.curios')
    exclusiveRepo(handler, 'https://maven.tterrag.com/', 'team.chisel.ctm')
    exclusiveRepo(handler, 'https://squiddev.cc/maven/', 'org.squiddev')
    exclusiveRepo(handler, 'https://www.cursemaven.com', 'curse.maven')
    exclusiveRepo(handler, 'https://modmaven.dev/', 'appeng', 'mcjty.theoneprobe')
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    compileOnly(fg.deobf("mezz.jei:jei-${minecraft_version}-common-api:${jei_version}"))
    // at runtime, use the full JEI jar for Forge
    runtimeOnly(fg.deobf("mezz.jei:jei-${minecraft_version}-forge:${jei_version}"))

    // Only used as a convenience during testing
    runtimeOnly fg.deobf("curse.maven:theoneprobe-245211:${top_version}"){ // FIXME!!!
        transitive = false
    }

    // cannot even run with this. Not sure why this was ever needed, mod wasn't even that large
//    runtimeOnly fg.deobf("curse.maven:architectury-api-419699:${architectury_version}")
//    implementation fg.deobf("curse.maven:scannable-266784:4352640")



////    runtimeOnly fg.deobf("itemtransformhelper:1.0")
//    runtimeOnly fg.deobf("ignored:itemtransformhelper:1.0")
//
//    // The API isn't enough for compiling or testing
    implementation fg.deobf("curse.maven:applied-energistics-2-223794:${ae2_version}") {
        transitive = false
    }
//

//
//
//
//    implementation fg.deobf("curse.maven:refined-storage-243076:${refinedstorage_version}");
}

def getManifestAttributes(String title) {
    return [
            "Specification-Title"     : title,
            "Specification-Vendor"    : "MachineMuse",
            "Specification-Version"   : "${project.version}",
            "Implementation-Title"    : title,
            "Implementation-Version"  : "${project.version}",
            "Implementation-Vendor"   : "MachineMuse",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
            "Automatic-Module-Name": title.toLowerCase(Locale.ROOT)
    ]
}

jar {
    duplicatesStrategy(DuplicatesStrategy.FAIL)
    archiveFileName.set("Numina-${minecraft_version}-${project.version}.jar")
    from(sourceSets.main.output)
    manifest.attributes(getManifestAttributes("Numina"))
    afterEvaluate { finalizedBy reobfJar }
}

task sourcesJar(type: Jar, dependsOn: [classes, powersuitsClasses, recipecreatorClasses, whateverClasses]) {
    duplicatesStrategy(DuplicatesStrategy.FAIL)
    archiveClassifier.set("sources")
    from(sourceSets.main.allJava, sourceSets.powersuits.allJava, sourceSets.recipecreator.allJava, sourceSets.whatever.allJava)
    manifest.attributes(getManifestAttributes("ModularPowersuits"))
}

task powersuitsJar(type: Jar) {
    duplicatesStrategy(DuplicatesStrategy.FAIL)
    archiveFileName.set("ModularPowersuits-${minecraft_version}-${project.version}.jar")
    archiveClassifier.set("powersuits")
    from sourceSets.powersuits.output
    manifest.attributes(getManifestAttributes("ModularPowersuits"))
    afterEvaluate { finalizedBy reobfPowersuitsJar }
}

task recipecreatorJar(type: Jar) {
    duplicatesStrategy(DuplicatesStrategy.FAIL)
    archiveFileName.set("MPSRecipecreator-${minecraft_version}-${project.version}.jar")
    archiveClassifier.set("recipecreator")
    from sourceSets.recipecreator.output
    manifest.attributes(getManifestAttributes("MPSRecipecreator"))
    afterEvaluate { finalizedBy reobfRecipecreatorJar }
}

task whateverJar(type: Jar) {
    duplicatesStrategy(DuplicatesStrategy.FAIL)
    archiveFileName.set("MPSWhatever-${minecraft_version}-${project.version}.jar")
    archiveClassifier.set("whatever")
    from sourceSets.whatever.output
    manifest.attributes(getManifestAttributes("MPSWhatever"))
    afterEvaluate { finalizedBy reobfWhateverJar }
}

clean {
    def filteredDelete = new HashSet<>()
    for (def toDelete : getDelete()) {
        for (def f : file(toDelete).listFiles()) {
            if (f.getName() == "generated") {
                for (def generated : file(f).listFiles()) {
                    if (generated.getName() != "data" && generated.getName() != "META-INF") {
                        filteredDelete.add(generated)
                    }
                }
            } else if (f.getName() != "fg_cache") {
                filteredDelete.add(f)
            }
        }
    }
    setDelete(filteredDelete)
}

tasks.withType(JavaCompile).configureEach({
    options.encoding = 'UTF-8'
    options.compilerArgs.addAll(["-Xmaxerrs", "100000"])
})

compileJava {
    options.getGeneratedSourceOutputDirectory().set(file("src/datagen/main/resources/"))
}

artifacts {
    archives jar
    archives recipecreatorJar
    archives powersuitsJar
    archives whateverJar
    archives sourcesJar
}

reobf {
    jar { classpath.from(sourceSets.main.compileClasspath) }
    powersuitsJar { classpath.from(sourceSets.powersuits.compileClasspath) }
    recipecreatorJar { classpath.from(sourceSets.recipecreator.compileClasspath) }
    whateverJar { classpath.from(sourceSets.whatever.compileClasspath) }
}

//Minimize/optimize all png files, requires optipng on the PATH
// Credits: BrainStone
void minimizePNGFile(File file) {
    long size = file.length()
    exec {
        executable "optipng"
        args "-q", "-o7", "-zm1-9", "-strip", "all", file
    }
    long newSize = file.length()
    if (newSize < size) {
        System.out.format("Reduced File size of %s from %d bytes to %d bytes (reduced by %.2f%%)\n",
                file, size, newSize, ((double) (size - newSize)) / ((double) size) * 100.0)
    }
}

tasks.register('optimizePng').configure {
    doLast {
        def pngPatterns = ["**/*.png"]
        //Ensure the logo is minimized (we add this file to each jar)
        minimizePNGFile(file("${projectDir}/logo.png"))
        //Minimize any PNGs in the source sets
        def sourceSets = [sourceSets.main, sourceSets.recipecreator, sourceSets.powersuits, sourceSets.whatever]
        for (def sourceSet : sourceSets) {
            for (dir in sourceSet.resources.srcDirs) {
                fileTree(dir: dir, includes: pngPatterns).each { minimizePNGFile(it) }
            }
        }
    }
}

tasks.withType(GenerateModuleMetadata).configureEach {
    //Disable Gradle 7 module metadata generation as it does not play nicely with FG
    enabled = false
}

def resolvedChangelog = null

//closure to generate the changelog once, and only when needed by CurseGradle or Modrinth
def changeLogResolver = { ->
    if (resolvedChangelog != null) {
        println "Using cached changelog"
        return resolvedChangelog
    }
    def generatedChangelog = "Unable to generate changelog :("
    def currentCommit = System.getenv("GIT_COMMIT")
    def prevCommit = System.getenv("GIT_PREVIOUS_SUCCESSFUL_COMMIT") ?: System.getenv("GIT_PREVIOUS_COMMIT")

    if (currentCommit != null && prevCommit != null) {
        generatedChangelog = ""
        grgit.log {
            range(prevCommit, currentCommit)
        }.reverse().each { commit ->
            //Use full message rather than short message to get any new lines, and trim it so that any trailing new lines
            // get removed so that we don't end up with extra spaces
            String message = commit.fullMessage.trim()
            if (!message.startsWith("Merge branch") && !message.startsWith("Merge pull request")) {
                //Ignore Merges and PR Merges
                message = message.replaceAll("#(\\d+)", { match ->//turn issues/prs into links (github currently supports prs being linked as issues)
                    return "<a href=\"https://github.com/mekanism/Mekanism/issues/${match[1]}\">${match[0]}</a>"
                }).replaceAll("\\n", "<br>&emsp;")//convert new lines that are part of a commit message into actual new lines and a tab
                if (generatedChangelog != "") {
                    //If this isn't the first commit prepend an extra newline
                    generatedChangelog += "<br>"
                }
                generatedChangelog += "<a href=\"https://github.com/mekanism/Mekanism/commit/${commit.id}\">${commit.getAbbreviatedId()}</a> - ${message}"
            }
        }
        println "Changelog generated"
    }

    def releaseNotesFile = project.file("docs/release_${mod_version}.html")
    if (releaseNotesFile.exists()) {
        //Add any version specific changelog stuff
        def releaseNotes = releaseNotesFile.getText()
        generatedChangelog = "$releaseNotes<br> $generatedChangelog"
    }

    if (release_type == "alpha") {
        //Add a warning at the top about what an alpha build means
        generatedChangelog = "Warning: Mekanism is currently in alpha, and is not recommended for widespread use in modpacks. There are likely to be game breaking bugs, " +
                "and updating from one alpha to the next may cause various mekanism blocks to disappear/void their contents. While we will try to not have this happen/keep " +
                "it to a minimum make sure to make backups. You can read more about the alpha state of this project <a href=\"https://github.com/mekanism/Mekanism#alpha-status\">here</a>." +
                "<br> $generatedChangelog"
    }
    resolvedChangelog = generatedChangelog
    return generatedChangelog
}

if (System.getenv("CURSEFORGE_KEY") != null || project.hasProperty('curseforgeKey')) {
    println "Enabling Curseforge config"
    tasks.named('curseforge').configure { dependsOn(jar, powersuitsJar, recipecreatorJar, whateverJar) }
    curseforge {
        apiKey = System.getenv("CURSEFORGE_KEY") ?: project.findProperty("curseforgeKey")

        // Numina
        project {
            id = '235440'
            changelogType = "html"
            changelog = changeLogResolver
            releaseType = "${release_type}"
            mainArtifact(jar) {
                relations {
                    optionalDependency "applied-energistics-2"
                    optionalDependency "scannable"
                    optionalDependency "refinedstorage"
                }
            }
            addGameVersion "Java ${java_version}"
            addGameVersion "${minecraft_version}"
        }

        // Modular Powersuits
        project {
            id = '235442'
            changelogType = "html"
            changelog = changeLogResolver
            releaseType = "${curse_release_type}"
            mainArtifact(powersuitsJar) {
                relations {
                    requiredDependency "numina"
                    optionalDependency "applied-energistics-2"
                    optionalDependency "scannable"
                    optionalDependency "refinedstorage"
                }
            }
            addGameVersion "${minecraft_version}"
        }

//        // MPS Recipe Creator
//        project {
//            id = 'fixme'
//            changelogType = "html"
//            changelog = changeLogResolver
//            releaseType = "${curse_release_type}"
//            mainArtifact(recipecreatorJar) {
//                relations {
//                    requiredDependency "numina"
//                    optionalDependency "jei"
//                }
//            }
//            addGameVersion "${minecraft_version}"
//        }

//        // MPSWhatever
//        project {
//            id = 'fixme'
//            changelogType = "html"
//            changelog = changeLogResolver
//            releaseType = "${curse_release_type}"
//            mainArtifact(whateverJar) {
//                relations {
//                    requiredDependency "numina"
//                }
//            }
//            addGameVersion "${minecraft_version}"
//        }
    }
}