buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '4.1.+', changing: true
    }
}

apply plugin: 'net.minecraftforge.gradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.

//Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
def buildnumber = System.getenv("BUILD_NUMBER")
def travisbuildnumber = (System.getenv("TRAVIS_BUILD_NUMBER") ?: -000).toInteger() + 00
version = "${minecraft_version}-${mod_version}.${buildnumber ?: travisbuildnumber}"
group = group_id // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'ModularPowersuits'

repositories {
    maven {
        // location of the maven that hosts JEI files
        name = "Progwml6 maven"
        url = "https://dvs1.progwml6.com/files/maven/"
    }
//    maven {
//        // location of a maven mirror for JEI files, as a fallback
//        name = "ModMaven"
//        url = "https://modmaven.k-4u.nl"
//    }
    repositories {
        flatDir {
            dir 'libs/'
        }
    }
}

minecraft {
//    mappings channel: "snapshot", version: "${project.mcp_version}".toString()
    mappings channel: 'official', version: '1.16.5'
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                modularpowerarmor {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                modularpowerarmor {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            args '--mod', 'modularpowerarmor', '--all', '--output', file('src/generated/resources/')

            mods {
                modularpowerarmor {
                    source sourceSets.main
                }
            }
        }
    }
}

dependencies {
    minecraft([
            group  : "net.minecraftforge",
            name   : "forge",
            version: "${project.minecraft_version}-${project.forge_version}"
    ])

//    // compile against the JEI API but do not include it at runtime
//    // currently not actually using any JEI code, just using it as a matter of convienience for testing.
//    compileOnly fg.deobf("mezz.jei:jei-${minecraft_version}:${jei_version}:api")
//
//    // at runtime, use the full JEI jar
//    runtimeOnly fg.deobf("mezz.jei:jei-${minecraft_version}:${jei_version}")

    // compile against the JEI API but do not include it at runtime
    // currently not actually using any JEI code, just using it as a matter of convienience for testing.
    compileOnly fg.deobf("mezz.jei:jei-${project.minecraft_version}:${jei_version}:api")

    // at runtime, use the full JEI jar
    runtimeOnly fg.deobf("mezz.jei:jei-${project.minecraft_version}:${jei_version}")


    compile fileTree(dir: 'libs', include: ['*.jar'])
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes(["Specification-Title": "Modular Powersuits",
                    "Specification-Vendor": "MachineMuse",
                    "Specification-Version": "35.0", // We are version 1 of the modlauncher specification
                    "Implementation-Title": project.name,
                    "Implementation-Version": "${version}",
                    "Implementation-Vendor" :"MachineMuse",
                    "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")],)
    }
}
